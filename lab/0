package main

import (
  "encoding/json"
  "strconv"
  "time"
  "log"
  "fmt"
)

var documentJSON string = `
{
  "Cur_ID": 426,
  "Date": "2024-12-31T00:00:00",
  "Cur_Abbreviation": "CHF",
  "Cur_Scale": 1,
  "Cur_Name": "Швейцарский франк",
  "Cur_OfficialRate": 3.8524
}
`

type CustomTime time.Time

type DocumentType struct {
  CurId int `json:"Cur_ID"`
  Date CustomTime `json:"Date"`
  CurAbbreviation string `json:"Cur_Abbreviation"`
  CurScale int `json:"Cur_Scale"`
  CurName string `json:"Cur_Name"`
  CurOfficialrate float32 `json:"Cur_OfficialRate"`
}

func (ct *CustomTime) UnmarshalJSON(data []byte) error {
  var vanillaTime *time.Time = new(time.Time)
  unquotedString, err := strconv.Unquote(string(data))
  if err != nil { panic(err) }
  *vanillaTime, err = time.Parse("2006-01-02T00:00:00", unquotedString)
  log.Print(1)
  log.Print(*vanillaTime)
  log.Print(2)
  if err != nil { panic(err) }
  *ct = CustomTime(*vanillaTime)
  return nil
}

func (ct CustomTime) String() string {
  return time.Time(ct).String()
}

func main() {
  documentInstance := new(DocumentType)
  err := json.Unmarshal([]byte(documentJSON), &documentInstance)
  if err != nil { panic(fmt.Sprintf("Unmarshalling error: %s", err)) }
  log.Print(documentInstance)
  fmt.Printf("%+v\n", documentInstance)
  fmt.Printf("%#v", time.Time(documentInstance.Date))
}
